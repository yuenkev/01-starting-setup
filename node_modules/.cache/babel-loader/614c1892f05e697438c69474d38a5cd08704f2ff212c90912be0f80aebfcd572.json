{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ktyue\\\\OneDrive\\\\Desktop\\\\ReactCourse\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\Expenses.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ExpensesList from \"./ExpensesList\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport \"./Expenses.css\";\n\n// When passing any prop other than a string (IN THIS CASE AN ARRAY) to a React component, we have to wrap the value in curly braces.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Expenses = props => {\n  _s();\n  // Use state to store the filter year value, as well as the default value\n  const [expenseYearFilter, setExpenseYearFilter] = useState(\"2020\");\n\n  //we're using this funciton/hanlder to save the selected Year, to filter\n  const saveExpenseYearHandler = expenseYear => {\n    //new data with an Year passed up from ExpenseFilter.js as the param\n    setExpenseYearFilter(expenseYear);\n  };\n\n  //we need a FILTER where it says if its the same year, put it into an array\n  const filteredArray = props.items.filter(exp => exp.date.getFullYear() == expenseYearFilter);\n  return (\n    /*#__PURE__*/\n    // Must have one ROOT element (div)\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: \"expenses\",\n        children: [/*#__PURE__*/_jsxDEV(ExpensesFilter\n        //this selected value is passed to the ExpenseFilter.js to set the select value to the default '2020'\n        , {\n          selected: expenseYearFilter,\n          onSaveYearFilter: saveExpenseYearHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ExpensesList, {\n          items: filteredArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Expenses, \"5Wi3Qzva7fLLYBfSqsfkFcLOe64=\");\n_c = Expenses;\nexport default Expenses;\nvar _c;\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpensesList","Card","ExpensesFilter","Expenses","props","expenseYearFilter","setExpenseYearFilter","saveExpenseYearHandler","expenseYear","filteredArray","items","filter","exp","date","getFullYear"],"sources":["C:/Users/ktyue/OneDrive/Desktop/ReactCourse/01-starting-setup/src/components/Expenses/Expenses.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport \"./Expenses.css\";\r\n\r\n// When passing any prop other than a string (IN THIS CASE AN ARRAY) to a React component, we have to wrap the value in curly braces.\r\n\r\nconst Expenses = (props) => {\r\n  // Use state to store the filter year value, as well as the default value\r\n  const [expenseYearFilter, setExpenseYearFilter] = useState(\"2020\");\r\n\r\n  //we're using this funciton/hanlder to save the selected Year, to filter\r\n  const saveExpenseYearHandler = (expenseYear) => {\r\n    //new data with an Year passed up from ExpenseFilter.js as the param\r\n    setExpenseYearFilter(expenseYear);\r\n  };\r\n\r\n  //we need a FILTER where it says if its the same year, put it into an array\r\n  const filteredArray = props.items.filter(\r\n    (exp) => exp.date.getFullYear() == expenseYearFilter\r\n  );\r\n\r\n\r\n  return (\r\n    // Must have one ROOT element (div)\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          //this selected value is passed to the ExpenseFilter.js to set the select value to the default '2020'\r\n          selected={expenseYearFilter}\r\n          onSaveYearFilter={saveExpenseYearHandler}/>\r\n        <ExpensesList items={filteredArray} />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,IAAI,MAAM,YAAY;AAC7B,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,gBAAgB;;AAEvB;AAAA;AAEA,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAAA;EAC1B;EACA,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGP,QAAQ,CAAC,MAAM,CAAC;;EAElE;EACA,MAAMQ,sBAAsB,GAAIC,WAAW,IAAK;IAC9C;IACAF,oBAAoB,CAACE,WAAW,CAAC;EACnC,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGL,KAAK,CAACM,KAAK,CAACC,MAAM,CACrCC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAACC,WAAW,EAAE,IAAIT,iBAAiB,CACrD;EAGD;IAAA;IACE;IACA;MAAA,uBACE,QAAC,IAAI;QAAC,SAAS,EAAC,UAAU;QAAA,wBACxB,QAAC;QACC;QAAA;UACA,QAAQ,EAAEA,iBAAkB;UAC5B,gBAAgB,EAAEE;QAAuB;UAAA;UAAA;UAAA;QAAA,QAAE,eAC7C,QAAC,YAAY;UAAC,KAAK,EAAEE;QAAc;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IACjC;MAAA;MAAA;MAAA;IAAA;EACH;AAEV,CAAC;AAAC,GA5BIN,QAAQ;AAAA,KAARA,QAAQ;AA8Bd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}